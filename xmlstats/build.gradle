buildscript {
    ext {
        springBootVersion = '2.0.3.RELEASE'
        jUnitVersion = '5.3.0-M1'
        mockitoVersion = '2.20.1'
        powerMockitoVersion = '2.0.0-beta.5'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

plugins {
    id "com.avast.gradle.docker-compose" version "0.7.1"
}

apply plugin: 'java'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'jacoco'

group = 'com.mt'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.10

repositories {
    mavenCentral()
}


dependencies {
    compile 'org.springframework.boot:spring-boot-starter-web'
    compile 'org.apache.commons:commons-lang3:3.7'
    compileOnly 'org.projectlombok:lombok:1.18.2'
    testCompile 'org.springframework.boot:spring-boot-starter-test'
    testCompile "org.junit.jupiter:junit-jupiter-engine:${jUnitVersion}"
    testCompile "org.junit.jupiter:junit-jupiter-api:${jUnitVersion}"
    testCompile "org.junit.vintage:junit-vintage-engine:${jUnitVersion}"
    testCompile "org.mockito:mockito-core:${mockitoVersion}"
    testCompile "org.mockito:mockito-junit-jupiter:${mockitoVersion}"
    testCompile "org.powermock:powermock-module-junit4:${powerMockitoVersion}"
    testCompile "org.powermock:powermock-api-mockito2:${powerMockitoVersion}"


}

test {
    useJUnitPlatform()
}

jacoco {
    toolVersion = "0.8.1"
}

jacocoTestReport {
    reports {
        xml.enabled false
        csv.enabled false
        html.destination file("${buildDir}/jacocoHtml")
    }
    afterEvaluate {
        classDirectories = files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    '**/*Application*',
                    '**/*model**'
            ])
        })
    }
}

test.finalizedBy('jacocoTestReport')
test.finalizedBy('integrationTest')


sourceSets {
    integrationTest {
        java {
            compileClasspath += main.output + test.output + main.compileClasspath + test.compileClasspath
            runtimeClasspath += main.output + test.output + main.runtimeClasspath + test.runtimeClasspath
            srcDir file('src/integration-test/java')
        }
        resources.srcDir file('src/integration-test/resources')
    }
}

configurations {
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
}

task integrationTest(type: Test, group: 'verification') {
    doFirst {
        dockerCompose.exposeAsEnvironment(integrationTest)
    }
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
}

dockerCompose.isRequiredBy(integrationTest)

dockerCompose {
    useComposeFiles = ["src/integration-test/resources/docker-compose.yml"]
}
